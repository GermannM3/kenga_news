import aiohttp
from bs4 import BeautifulSoup
import re
from cachetools import cached, TTLCache
import logging
from dotenv import load_dotenv
import os
from aiogram import Bot
import asyncio
from bot.database import is_news_published, add_news_to_db

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

logger = logging.getLogger(__name__)

# API-–∫–ª—é—á –¥–ª—è News API
NEWS_API_KEY = os.getenv("NEWS_API_KEY")

# –ö—ç—à –Ω–∞ 10 –º–∏–Ω—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
cache = TTLCache(maxsize=100, ttl=600)

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ö—ç—à—Ç–µ–≥–∏
KEYWORDS = ["xbox", "AI", "–ö–ù–î–†", "–†–æ—Å—Å–∏—è", "—ç–∫–æ–Ω–æ–º–∏–∫–∞", "–∫–æ—Å–º–æ—Å"]
HASHTAGS = {kw.lower(): f"#{kw.lower()}" for kw in KEYWORDS}

# –ö—ç—à –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π (–Ω–µ —á–∞—â–µ 1 –Ω–æ–≤–æ—Å—Ç–∏ –≤ 30 —Å–µ–∫—É–Ω–¥)
publish_cache = TTLCache(maxsize=1, ttl=30)

def clean_text(text):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–∞—Ä—É—à–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown –∏–ª–∏ HTML."""
    return re.sub(r"[\*_\[\]()]", "", text) if text else ""

@cached(cache)
async def fetch_news(keyword):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –∏–∑ News API."""
    url = (
        f"https://newsapi.org/v2/everything"
        f"?q={keyword}&apiKey={NEWS_API_KEY}&language=ru&sortBy=publishedAt&pageSize=5"
    )
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                return await response.json()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ News API: {response.status}")
            return {"articles": []}

async def publish_news(bot: Bot):
    """–ü—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –≤ Telegram-–∫–∞–Ω–∞–ª —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —á–∞—Å—Ç–æ—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."""
    try:
        for keyword in KEYWORDS:
            news_data = await fetch_news(keyword)
            articles = news_data.get("articles", [])

            for article in articles:
                title = clean_text(article.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"))
                description = clean_text(article.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"))
                url = article.get("url", "#")
                image_url = article.get("urlToImage", "")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –Ω–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞
                if is_news_published(title):
                    logger.info(f"–ù–æ–≤–æ—Å—Ç—å —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: {title}")
                    continue

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö—ç—à—Ç–µ–≥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
                relevant_hashtags = [
                    HASHTAGS[key] for key in HASHTAGS
                    if key in title.lower() or key in description.lower()
                ]
                hashtags = " ".join(relevant_hashtags) if relevant_hashtags else ""

                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                message = (
                    f"<b>{title}</b>\n\n"  # –ñ–∏—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    f"{description}\n\n"  # –û–ø–∏—Å–∞–Ω–∏–µ
                    f"<a href='{url}'>–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>\n\n"  # –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å
                    f"{hashtags}\n\n"
                    "ü¶ò –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è: @kenga_news"
                )

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π
                if "last_published" in publish_cache:
                    logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π —Å–ª–µ–¥—É—é—â–µ–π –Ω–æ–≤–æ—Å—Ç–∏.")
                    await asyncio.sleep(30)

                # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏
                try:
                    if image_url:
                        await bot.send_photo(
                            chat_id=os.getenv("PUBLICATION_CHANNEL_ID"),
                            photo=image_url,
                            caption=message,
                            parse_mode="HTML"
                        )
                    else:
                        await bot.send_message(
                            chat_id=os.getenv("PUBLICATION_CHANNEL_ID"),
                            text=message,
                            parse_mode="HTML"
                        )
                    logger.info(f"–ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: {title}")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                    add_news_to_db(title)
                    publish_cache["last_published"] = True

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")

                # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏
                await asyncio.sleep(30)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
