import aiohttp
from bs4 import BeautifulSoup
import re
from cachetools import cached, TTLCache
from tenacity import retry, stop_after_attempt, wait_fixed
import logging
from dotenv import load_dotenv
import os
from aiogram import Bot
import asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º API-–∫–ª—é—á –∏–∑ .env
NEWS_API_KEY = os.getenv("NEWS_API_KEY")

# –ö—ç—à –Ω–∞ 10 –º–∏–Ω—É—Ç
cache = TTLCache(maxsize=100, ttl=600)

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
KEYWORDS = ["xbox", "AI", "–ö–ù–î–†", "–†–æ—Å—Å–∏—è", "—ç–∫–æ–Ω–æ–º–∏–∫–∞", "–∫–æ—Å–º–æ—Å"]

# –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–∞—Ä—É—à–∏—Ç—å Markdown
def clean_text(text):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –Ω–∞—Ä—É—à–∏—Ç—å Markdown."""
    if not text:
        return ""
    # –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª—ã *, _, [, ], (, )
    return re.sub(r"[\*_\[\]()]", "", text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
@cached(cache)
async def fetch_news(keyword):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É."""
    url = f"https://newsapi.org/v2/everything?q={keyword}&apiKey={NEWS_API_KEY}&language=ru&sortBy=publishedAt&pageSize=5"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            return await response.json()

async def publish_news(bot: Bot):
    """–ü—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª."""
    from bot.database import is_news_published, add_news_to_db

    try:
        for keyword in KEYWORDS:
            news_data = await fetch_news(keyword)
            articles = news_data.get("articles", [])

            for article in articles:
                title = clean_text(article.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"))
                description = clean_text(article.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"))
                url = article.get("url", "#")
                image_url = article.get("urlToImage", "")  # URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

                if not is_news_published(title):
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ö—ç—à—Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–∏
                    relevant_hashtags = [
                        f"#{keyword}" for keyword in KEYWORDS
                        if keyword.lower() in title.lower() or keyword.lower() in description.lower()
                    ]
                    hashtags = " ".join(relevant_hashtags) if relevant_hashtags else ""

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∂–∏—Ä–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, —Ö—ç—à—Ç–µ–≥–∞–º–∏, –ø–æ–¥–ø–∏—Å—å—é –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                    message = (
                        f"<b>{title}</b>\n\n"  # –ñ–∏—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                        f"{description}\n\n"
                        f"<a href='{url}'>–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>\n\n"  # –°—Å—ã–ª–∫–∞
                        f"{hashtags}\n\n"
                        "ü¶ò –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è: @keng_news"
                    )

                    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if image_url:
                        await bot.send_photo(
                            chat_id=os.getenv("PUBLICATION_CHANNEL_ID"),
                            photo=image_url,
                            caption=message,
                            parse_mode="HTML"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        )
                    else:
                        await bot.send_message(
                            chat_id=os.getenv("PUBLICATION_CHANNEL_ID"),
                            text=message,
                            parse_mode="HTML"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        )

                    add_news_to_db(title)
                    logger.info(f"–ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: {title}")

                    # –ó–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                    await asyncio.sleep(2)

                else:
                    logger.info(f"–ù–æ–≤–æ—Å—Ç—å —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: {title}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")