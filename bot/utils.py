import aiohttp
import re
import logging
import os
from aiogram import Bot
import asyncio
from bot.database import is_news_published, add_news_to_db

logger = logging.getLogger(__name__)

# API-–∫–ª—é—á –∏ –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
NEWS_API_KEY = os.getenv("NEWS_API_KEY")
KEYWORDS = ["xbox", "AI", "–ö–ù–î–†", "–†–æ—Å—Å–∏—è", "—ç–∫–æ–Ω–æ–º–∏–∫–∞", "–∫–æ—Å–º–æ—Å"]
HASHTAGS = {kw.lower(): f"#{kw.lower()}" for kw in KEYWORDS}

def clean_text(text):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    return re.sub(r"[\*_\[\]()]", "", text) if text else ""

async def fetch_news(keyword):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É"""
    url = f"https://newsapi.org/v2/everything?q={keyword}&apiKey={NEWS_API_KEY}&language=ru&sortBy=publishedAt&pageSize=5"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                return await response.json()  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {response.status}")
            return {"articles": []}

async def publish_news(bot: Bot, redis_client):
    """–ü—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Redis"""
    try:
        while True:
            for keyword in KEYWORDS:
                news_data = await fetch_news(keyword)
                articles = news_data.get("articles", [])

                for article in articles:
                    title = clean_text(article.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"))
                    description = clean_text(article.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"))
                    url = article.get("url", "#")
                    image_url = article.get("urlToImage", "")

                    if is_news_published(redis_client, title):
                        logger.info(f"–ù–æ–≤–æ—Å—Ç—å —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: {title}")
                        continue

                    relevant_hashtags = [
                        HASHTAGS[key] for key in HASHTAGS
                        if key in title.lower() or key in description.lower()
                    ]
                    hashtags = " ".join(relevant_hashtags) if relevant_hashtags else ""

                    message = (
                        f"<b>{title}</b>\n\n{description}\n\n<a href='{url}'>–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ</a>\n\n"
                        f"{hashtags}\n\nü¶ò –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è: @kenga_news"
                    )

                    try:
                        if image_url:
                            await bot.send_photo(
                                chat_id=os.getenv("PUBLICATION_CHANNEL_ID"),
                                photo=image_url,
                                caption=message,
                                parse_mode="HTML"
                            )
                        else:
                            await bot.send_message(
                                chat_id=os.getenv("PUBLICATION_CHANNEL_ID"),
                                text=message,
                                parse_mode="HTML"
                            )
                        add_news_to_db(redis_client, title)
                        logger.info(f"–ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: {title}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

                    await asyncio.sleep(30)
            await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–π —á–∞—Å
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
